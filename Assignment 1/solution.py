# -*- coding: utf-8 -*-
"""solution

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14TA9xB1w6lF2KFNWvrCDWBm_oBZ_PT8A
"""

import string
char_to_idx = {
    'a' : 0,
    'b' : 1,
    'c' : 2,
    'd' : 3,
    'e' : 4,
    'f' : 5,
    'g' : 6,
    'h' : 7,
    'i' : 8,
    'j' : 9,
    'k' : 10,
    'l' : 11,
    'm' : 12,
    'n' : 13,
    'o' : 14,
    'p' : 15,
    'q' : 16,
    'r' : 17,
    's' : 18,
    't' : 19,
    'u' : 20,
    'v' : 21,
    'w' : 22,
    'x' : 23,
    'y' : 24,
    'z' : 25
}

idx_to_char = {
    0 : 'a',
    1 : 'b',
    2 : 'c',
    3 : 'd',
    4 : 'e',
    5 : 'f',
    6 : 'g',
    7 : 'h',
    8 : 'i',
    9 : 'j',
    10 : 'k',
    11 : 'l',
    12 : 'm',
    13 : 'n',
    14 : 'o',
    15 : 'p',
    16 : 'q',
    17 : 'r',
    18 : 's',
    19 : 't',
    20 : 'u',
    21 : 'v',
    22 : 'w',
    23 : 'x',
    24 : 'y',
    25 : 'z'
}

def shift(process, k):
  if process == "encrypt":
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:   
        x = char_to_idx[c.lower()]
        y = idx_to_char[(x + k) % 26]
        fout.write(y)
      else:
        fout.write(c)
  else:
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:   
        y = char_to_idx[c.lower()]
        x = idx_to_char[(y - k) % 26]
        fout.write(x)
      else:
        fout.write(c)

def affine(process, a, b):
  a_1 = 0
  for i in range(26):
    if (i * a)%26 == 1:
      a_1 = i
      break 
  if process == "encrypt":
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:   
        x = char_to_idx[c.lower()]
        y = idx_to_char[(a * x + b) % 26]
        fout.write(y)
      else:
        fout.write(c)
  else:
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:   
        y = char_to_idx[c.lower()]
        x = idx_to_char[a_1*(y - b) % 26]
        fout.write(x)
      else:
        fout.write(c)

def vigenere(process, k):
  if process == "encrypt":
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:
        x = char_to_idx[c.lower()]
        y = idx_to_char[(x + k) % 26]
        fout.write(y)
      else:
        fout.write(c)
  else:
    while True:
      c = fin.read(1)
      if not c:
        break
      elif c.isalpha() == True:   
        y = char_to_idx[c.lower()]
        x = idx_to_char[(y - k + 26) % 26]
        fout.write(x)
      else:
        fout.write(c)

text = input("prompt").split()
fin = open(text[2], "r")
fout = open(text[3], "w")
fout.write("")
fout = open(text[3], "a")
if text[0] == "shift":
  shift(text[1], int(text[4]))
elif text[0] == "affine":
  affine(text[1], int(text[4]), int(text[5]))
else:
  vigenere(text[1], int(text[4]))
